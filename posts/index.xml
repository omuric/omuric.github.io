<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on o</title>
    <link>https://omuric.github.io/posts/</link>
    <description>Recent content in Posts on o</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 08 Dec 2024 18:20:00 +0900</lastBuildDate>
    
	<atom:link href="https://omuric.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ISUCON 14 参加記</title>
      <link>https://omuric.github.io/posts/isucon14/</link>
      <pubDate>Sun, 08 Dec 2024 18:20:00 +0900</pubDate>
      
      <guid>https://omuric.github.io/posts/isucon14/</guid>
      <description>&lt;h1 id=&#34;isucon-14-参加記&#34;&gt;ISUCON 14 参加記&lt;/h1&gt;
&lt;p&gt;久方ぶりに一人で参加&lt;br&gt;
言語は Rust&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://isucon.net/archives/58818382.html&#34;&gt;https://isucon.net/archives/58818382.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://omuric.github.io/isucon14/result1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://omuric.github.io/isucon14/result2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;やったこと&#34;&gt;やったこと&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;chair テーブルにカラム追加
&lt;ul&gt;
&lt;li&gt;緯度・経度&lt;/li&gt;
&lt;li&gt;速度&lt;/li&gt;
&lt;li&gt;ライドに使用中かどうか
&lt;ul&gt;
&lt;li&gt;GET /api/chair/notification で COMPLETED を返したときに未使用に戻す&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GET /api/internal/matching をいい感じに
&lt;ul&gt;
&lt;li&gt;ライドから見て、最も早く到達する椅子をマッチングさせるように
&lt;ul&gt;
&lt;li&gt;椅子から見てライドもやったけどスコアは伸びず&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;chairs に貼ったカラムを使う&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GET /api/*/notification 系の retry_after_ms を長くする
&lt;ul&gt;
&lt;li&gt;SSE やりたかったけど、知見が無さすぎて厳しいので割り切って諦め&lt;/li&gt;
&lt;li&gt;chair を 500ms, app を 2000ms とかにした (適当)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GET /api/app/nearby-chairs を高速化
&lt;ul&gt;
&lt;li&gt;chairs に貼ったカラムを使う&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;サーバを以下の構成に
&lt;ul&gt;
&lt;li&gt;1台目: app・MySQL&lt;/li&gt;
&lt;li&gt;2台目: app・nginx・matcher&lt;/li&gt;
&lt;li&gt;3台目: app&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スロークエリを見ながらインデックスを貼る&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;やり残し&#34;&gt;やり残し&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;たまにベンチの初期化処理で落ちるバグが直せず
&lt;ul&gt;
&lt;li&gt;追試で落ちそう&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;chairs の移動距離の合計を集計するのをやろうとしたが時間が足りず断念&lt;/li&gt;
&lt;li&gt;SSE 勉強&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ICFP-PC 2022 参加記</title>
      <link>https://omuric.github.io/posts/icfp-pc2022/</link>
      <pubDate>Sat, 17 Sep 2022 22:00:00 +0900</pubDate>
      
      <guid>https://omuric.github.io/posts/icfp-pc2022/</guid>
      <description>&lt;h1 id=&#34;icfp-pc-2022-参加記&#34;&gt;ICFP-PC 2022 参加記&lt;/h1&gt;
&lt;p&gt;2022年 9/3(金) ~ 9/5(月) に開催された ICFP-PC 2022 にチーム chirijako で参加しました&lt;/p&gt;
&lt;p&gt;コンテストサイト&lt;br&gt;
&lt;a href=&#34;https://icfpcontest2022.github.io/index.html&#34;&gt;https://icfpcontest2022.github.io/index.html&lt;/a&gt;&lt;br&gt;
リポジトリ
&lt;a href=&#34;https://gitlab.com/icfp-pc2022_chirijako/icfp-pc2022&#34;&gt;https://gitlab.com/icfp-pc2022_chirijako/icfp-pc2022&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;結果&#34;&gt;結果&lt;/h2&gt;
&lt;p&gt;17/160 位でした&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://omuric.github.io/icfpc2022/result.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;チームでやったこと&#34;&gt;チームでやったこと&lt;/h2&gt;
&lt;p&gt;TBW&lt;/p&gt;
&lt;h2 id=&#34;自分がやったこと&#34;&gt;自分がやったこと&lt;/h2&gt;
&lt;p&gt;TBW&lt;/p&gt;
&lt;h2 id=&#34;来年に向けてやっとくこと&#34;&gt;来年に向けてやっとくこと&lt;/h2&gt;
&lt;p&gt;TBW&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ISUCON 12 本選 参加記</title>
      <link>https://omuric.github.io/posts/isucon12-final/</link>
      <pubDate>Sat, 17 Sep 2022 22:00:00 +0900</pubDate>
      
      <guid>https://omuric.github.io/posts/isucon12-final/</guid>
      <description>&lt;h1 id=&#34;isucon-12-予選-参加記&#34;&gt;ISUCON 12 予選 参加記&lt;/h1&gt;
&lt;p&gt;2022年 8月27日 (土) に開催された ISUCON 12 の予選にチームO (dice801, daiju, omu) で Rust で参加しました&lt;br&gt;
自分達の最終結果は 126,837 点で、11位でした&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://omuric.github.io/isucon12-final/result.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;事前準備&#34;&gt;事前準備&lt;/h2&gt;
&lt;p&gt;TBW&lt;/p&gt;
&lt;h2 id=&#34;当日チームでやったこと&#34;&gt;当日チームでやったこと&lt;/h2&gt;
&lt;p&gt;TBW&lt;/p&gt;
&lt;h2 id=&#34;当日自分がやったこと&#34;&gt;当日自分がやったこと&lt;/h2&gt;
&lt;p&gt;TBW&lt;/p&gt;
&lt;h2 id=&#34;良かったこと&#34;&gt;良かったこと&lt;/h2&gt;
&lt;p&gt;TBW&lt;/p&gt;
&lt;h2 id=&#34;反省点&#34;&gt;反省点&lt;/h2&gt;
&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>ISUCON 12 予選 参加記</title>
      <link>https://omuric.github.io/posts/isucon12-qualify/</link>
      <pubDate>Sun, 24 Jul 2022 17:00:00 +0900</pubDate>
      
      <guid>https://omuric.github.io/posts/isucon12-qualify/</guid>
      <description>&lt;h1 id=&#34;isucon-12-予選-参加記&#34;&gt;ISUCON 12 予選 参加記&lt;/h1&gt;
&lt;p&gt;2022年 7月23日 (土) に開催された ISUCON 12 の予選にチームO (dice801, daiju, omu) で Rust で参加しました&lt;br&gt;
自分達の最終結果は 25598 点で、20位で予選突破しました。&lt;br&gt;
(&lt;a href=&#34;https://isucon.net/archives/56838276.html&#34;&gt;最終結果一覧&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://omuric.github.io/isucon12-qualify/benchmark.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;事前準備&#34;&gt;事前準備&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://omuric.github.io/posts/isucon10-qualify/&#34;&gt;ISUCON 10&lt;/a&gt; や ISUCON 11 で使ったツール類を準備
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sagiegurari/cargo-make&#34;&gt;cargo-make&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;各操作を定義してデプロイや kataribe, pt-query-digest の実行など、コマンド一発で諸々できるようにしていた&lt;/li&gt;
&lt;li&gt;↓の感じで各操作の通知が discord に来る感じにもしていた&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://omuric.github.io/isucon12-qualify/notify.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/omuric/isuconf&#34;&gt;isuconf&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;設定ファイルの管理を行うために自前で用意した CLI ツール&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/omuric/isuconf/main/.img/screenshot.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;各インスタンスの設定ファイルの収集・配布を簡単に出来るやつ&lt;/li&gt;
&lt;li&gt;去年の予選時にこしらえたもので、今年も幾つか機能追加をした (push, pull 操作の並列化や ssh-config 生成のサポートなど)&lt;/li&gt;
&lt;li&gt;我ながらそこそこ便利で、去年のチームメンバが別のチームでも布教してくれていて嬉しかったです&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/launchbadge/sqlx&#34;&gt;sqlx&lt;/a&gt; での典型的な DB 操作の素振り
&lt;ul&gt;
&lt;li&gt;普段使わないので本番でハマりがちという反省から&lt;/li&gt;
&lt;li&gt;in 句による select や bulk insert などの典型と思われるものを練習した&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hinohi/rust-opentelemetry-auto-span&#34;&gt;hinohi/rust-opentelemetry-auto-span&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;チームメンバの daiju さんが作った opentelemetry 対応の為のライブラリ
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OutThereLabs/actix-web-opentelemetry&#34;&gt;actix-web-opentelemetry&lt;/a&gt; の実装を楽にする感じ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;関数にアノテーションをつけるだけでボトルネックが見えるようになり最高でした&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://omuric.github.io/isucon12-qualify/opentelemetry.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;当日チームでやったこと&#34;&gt;当日チームでやったこと&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sqlite から mysql への移行&lt;/li&gt;
&lt;li&gt;アプリケーションサーバと DB サーバの分離&lt;/li&gt;
&lt;li&gt;テーブルの圧縮
&lt;ul&gt;
&lt;li&gt;visit_history&lt;/li&gt;
&lt;li&gt;player_score&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;N+1 クエリの解消&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;当日自分がやったこと&#34;&gt;当日自分がやったこと&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;N+1 クエリの解消
&lt;ul&gt;
&lt;li&gt;コミットログ見ると4つぐらい直したみたいです
&lt;ul&gt;
&lt;li&gt;competition_ranking_handler の N+1 を修正&lt;/li&gt;
&lt;li&gt;player_handler の N+1 を解消&lt;/li&gt;
&lt;li&gt;player_score を bulk insert&lt;/li&gt;
&lt;li&gt;competition_score_handler の N+1 を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;player_score 圧縮のアプリ側の対応
&lt;ul&gt;
&lt;li&gt;row_num が一番大きいものだけを残せばいいのでそうする&lt;/li&gt;
&lt;li&gt;初期データの修正は daiju さんが sqlite -&amp;gt; mysql への切替時に合わせてやってくれていました&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;sqlite -&amp;gt; mysql への切り替えのアプリ側の対応
&lt;ul&gt;
&lt;li&gt;コード中の sqlite への接続箇所を mysql に切り替える対応&lt;/li&gt;
&lt;li&gt;データ構造の設計や切り替えは daiju さんが全てやってくれていました&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dispense_id の生成処理修正
&lt;ul&gt;
&lt;li&gt;アプリ側で UUID を生成する形に変更&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pem ファイルをプログラム起動時に読み込む
&lt;ul&gt;
&lt;li&gt;リクエスト毎にファイル読み込みをしていたので修正&lt;/li&gt;
&lt;li&gt;コードリーディング時にパッと目についたので直したけど余り意味なかったかも&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;良かったこと&#34;&gt;良かったこと&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Rust での参加
&lt;ul&gt;
&lt;li&gt;今回 sqlx 周りぐらいでしかバグは出ず、改めて良い言語だなという感想&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ツール類による効率化
&lt;ul&gt;
&lt;li&gt;ツールによる自動化で主要な操作はコマンド一発で対応できていて体験が良かった&lt;/li&gt;
&lt;li&gt;本質的な改善活動に集中できた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;反省点&#34;&gt;反省点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アプリサーバの分離が間に合わなかった
&lt;ul&gt;
&lt;li&gt;最終的な構成はアプリサーバ1台 DBサーバ1台で、1台サーバを余らせている状態だった&lt;/li&gt;
&lt;li&gt;アプリの CPU がきつそうだったので、アプリサーバを2台にしたかったが、flock の引き剥がしが間に合わず対応できなかった&lt;/li&gt;
&lt;li&gt;複数のアプリの状態管理に対する素振りが足りていなかったかなという反省&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;方針決めにあまり貢献できなかったこと
&lt;ul&gt;
&lt;li&gt;大きな変更 (sqlite の mysql への切り替え) の方針については主に daiju さん, dice801 さんが会話して方針を決めていた&lt;/li&gt;
&lt;li&gt;自分は決まった方針に対して必要な一部タスクを実施する人になっており、方針決めに頭を使えなかったのは反省&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;
&lt;p&gt;今年で ISUCON に参加するのは 5年目ですが、ようやく初めて予選突破できました。&lt;br&gt;
優秀なチームメンバと良いチームワークで問題に取り組めたのが良かったのかなと思います。&lt;br&gt;
本戦でもチームに貢献して良い成績を取れるよう頑張りたいです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ICFP-PC 2021 参加記</title>
      <link>https://omuric.github.io/posts/icfp-pc2021/</link>
      <pubDate>Sat, 24 Jul 2021 20:55:00 +0900</pubDate>
      
      <guid>https://omuric.github.io/posts/icfp-pc2021/</guid>
      <description>&lt;h1 id=&#34;icfp-pc-2021-参加記&#34;&gt;ICFP-PC 2021 参加記&lt;/h1&gt;
&lt;p&gt;2021年 7/9(金) ~ 7/12(月) に開催された ICFP-PC 2021 にチーム chirijako で参加しました&lt;br&gt;
コンテストサイト&lt;br&gt;
&lt;a href=&#34;https://icfpcontest2021.github.io/index.html&#34;&gt;https://icfpcontest2021.github.io/index.html&lt;/a&gt;&lt;br&gt;
リポジトリ (諸々認証情報は無効化済み)&lt;br&gt;
&lt;a href=&#34;https://gitlab.com/icfp-pc2021_e-seikatsu/icfp-pc2021&#34;&gt;https://gitlab.com/icfp-pc2021_e-seikatsu/icfp-pc2021&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ちょこちょこメンバーが変わりつつ、このチームで参加するのは今年で五年目ぐらい&lt;br&gt;
(去年は諸事情により自分は参加しなかった)&lt;br&gt;
今年は Rust で参加しました&lt;br&gt;
例年 C++、Python で参加してましたが、今年は何故かメンバー全員 Rust 使えるようになっており凄い&lt;/p&gt;
&lt;h2 id=&#34;結果&#34;&gt;結果&lt;/h2&gt;
&lt;p&gt;6/160 位でした&lt;br&gt;
いつもは 30 位くらいなのでかなり健闘できた (嬉しい)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://omuric.github.io/icfpc2021/result.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;チームでやったこと&#34;&gt;チームでやったこと&lt;/h2&gt;
&lt;h3 id=&#34;焼きなましソルバ&#34;&gt;焼きなましソルバ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Rust でチームメイトが実装&lt;/li&gt;
&lt;li&gt;クソつよ EC2 インスタンス (c5.24xlarge) 借りて並列でソルバーを回した結果、ほとんどの問題をいい感じに解いた&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://omuric.github.io/icfpc2021/ec2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;web-ダッシュボード&#34;&gt;Web ダッシュボード&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;TypeScript + React でチームメイトが実装&lt;/li&gt;
&lt;li&gt;これまで出した解の一覧が問題ごとにランキング形式で見れる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://omuric.github.io/icfpc2021/web-dashboard-1.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;簡易的な操作機構がついており、後述するビジュアライザが出来るまでは、コレで手動で解いていた&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://omuric.github.io/icfpc2021/web-dashboard-2.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;ビジュアライザ&#34;&gt;ビジュアライザ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Rust で自分が実装&lt;/li&gt;
&lt;li&gt;ソルバーで解けない問題はコレを使って手動で解いた&lt;/li&gt;
&lt;li&gt;詳細は後述&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;自分がやったこと&#34;&gt;自分がやったこと&lt;/h2&gt;
&lt;p&gt;例年ソルバー係をやっていましたが、今年は途中で無力を感じてビジュアライザ係になりました&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/icfp-pc2021_e-seikatsu/icfp-pc2021/-/tree/main/pad&#34;&gt;https://gitlab.com/icfp-pc2021_e-seikatsu/icfp-pc2021/-/tree/main/pad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使ったことが無い &lt;a href=&#34;https://github.com/hecrj/coffee&#34;&gt;coffee&lt;/a&gt; をノリで使ってみたがかなり良かった&lt;/li&gt;
&lt;li&gt;ビジュアライザ上で焼きなましを実行できるようにしてみた
&lt;ul&gt;
&lt;li&gt;「人間が大まかな形を作る」 -&amp;gt; 「焼きなましで微調整」がかなり体験として良かった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://omuric.github.io/icfpc2021/poses-pad.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://omuric.github.io/icfpc2021/poses-pad.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://omuric.github.io/icfpc2021/poses-ope.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;チームメンバーの意見を参考にしつつ色々追加していった結果、↑の通りかなり多機能になった&lt;br&gt;
「実装」 -&amp;gt; 「メンバーからのフィードバック」 -&amp;gt; 「実装」 のサイクルができていて、開発楽し〜〜となっていた&lt;/p&gt;
&lt;h2 id=&#34;ビジュアライザについて振り返ってみて感じたことなど&#34;&gt;ビジュアライザについて振り返ってみて感じたことなど&lt;/h2&gt;
&lt;h3 id=&#34;ソルバーとの結合は重要&#34;&gt;ソルバーとの結合は重要&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ソルバーの挙動確認やデバッグの効率が上がる&lt;/li&gt;
&lt;li&gt;ビジュアライザとソルバーを結合することで、手動解も作りやすくなる&lt;/li&gt;
&lt;li&gt;できれば実装を始める前にソルバー係とインタフェースの打ち合わせをしたほうが良い&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;手動で解くのが有効かどうかで実装方針が変わる&#34;&gt;手動で解くのが有効かどうかで実装方針が変わる&lt;/h3&gt;
&lt;p&gt;手動で解くのが有効化どうかは、以下の点が重要&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ソルバーの実装が難しい&lt;/li&gt;
&lt;li&gt;盤面が人間の脳に理解しやすい
&lt;ul&gt;
&lt;li&gt;二次元の問題&lt;/li&gt;
&lt;li&gt;操作順がスコアリングに影響しない問題
&lt;ul&gt;
&lt;li&gt;順番を気にするのは人間には難しい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;手動で解いてくれそうなメンバーが居る
&lt;ul&gt;
&lt;li&gt;手動で解く人が居ない場合、手動で解くことは有効でない&lt;/li&gt;
&lt;li&gt;多ければ多いほど手動で解くことは有効&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;手動が有効でないならソルバーの挙動確認がビジュアライザの主目的になるので、実装方針に影響する&lt;br&gt;
一部の問題のみ↑が当てはまるのはありがちなストーリーなので、問題の把握は大事&lt;/p&gt;
&lt;h3 id=&#34;web-で実装するかネイティブで実装するか&#34;&gt;web で実装するか、ネイティブで実装するか&lt;/h3&gt;
&lt;p&gt;結構悩みどころで、比較してみると&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ネイティブアプリ
&lt;ul&gt;
&lt;li&gt;環境依存の挙動が比較的出やすい&lt;/li&gt;
&lt;li&gt;ソルバーをビジュアライザと結合しやすい
&lt;ul&gt;
&lt;li&gt;言語が同じなら結合コストがかなり小さくなる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;入出力はコマンドライン上の指定が可能で楽&lt;/li&gt;
&lt;li&gt;自由に言語選択できる&lt;/li&gt;
&lt;li&gt;言語に対する習熟度によっては実行までのコストが大きい
&lt;ul&gt;
&lt;li&gt;バイナリを配布できるなら大丈夫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web アプリ
&lt;ul&gt;
&lt;li&gt;環境依存の挙動が少ない&lt;/li&gt;
&lt;li&gt;ソルバーとの結合が難しい
&lt;ul&gt;
&lt;li&gt;ウェブアセンブリ使えばまあ出来る?&lt;/li&gt;
&lt;li&gt;少なくともネイティブアプリよりはコストがかかるはず&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;入出力ファイルのインターフェースが (普通に実装すると) 扱いづらい&lt;/li&gt;
&lt;li&gt;(基本的には) 言語を typescript に強制される&lt;/li&gt;
&lt;li&gt;どこかにホスティングすれば実行までのコストは無&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記踏まえて、ソルバーとの結合が結構重要なので、ソルバー係と言語を合わせてネイティブアプリが良さそうかもと思った&lt;br&gt;
ウェブアセンブリに習熟すれば話が変わるのかも&lt;/p&gt;
&lt;h2 id=&#34;来年に向けてやっとくこと&#34;&gt;来年に向けてやっとくこと&lt;/h2&gt;
&lt;h3 id=&#34;ソルバー周り&#34;&gt;ソルバー周り&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;いい感じのソルバーを実装できなかったのは反省&lt;/li&gt;
&lt;li&gt;焼きなましを AHC の過去問とかで素振りする&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ビジュアライザ周り&#34;&gt;ビジュアライザ周り&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;三次元の何かのビジュアライザを実装してみる&lt;/li&gt;
&lt;li&gt;今回の実装から二次元ビジュアライザのテンプレを作る&lt;/li&gt;
&lt;li&gt;ウェブアセンブリの素振り&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;幾何&#34;&gt;幾何&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;自前実装が結構しんどいのでいい感じの幾何ライブラリを探す&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Codingame Fall Challenge 2020 参加記</title>
      <link>https://omuric.github.io/posts/codingame-fall-challenge-2020/</link>
      <pubDate>Tue, 24 Nov 2020 00:40:00 +0900</pubDate>
      
      <guid>https://omuric.github.io/posts/codingame-fall-challenge-2020/</guid>
      <description>&lt;h1 id=&#34;codingame-fall-challenge-2020-参加記&#34;&gt;Codingame Fall Challenge 2020 参加記&lt;/h1&gt;
&lt;p&gt;2020年 11/12(木) ~ 11/23(月) に開催された &lt;a href=&#34;https://www.codingame.com/contests/fall-challenge-2020&#34;&gt;Codingame Fall Challenge 2020&lt;/a&gt; に参加しました&lt;br&gt;
最終結果は 41/7043 位でした&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://omuric.github.io/codingame-fall-challenge-2020/result.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;やったこと&#34;&gt;やったこと&lt;/h2&gt;
&lt;h3 id=&#34;ビームサーチ&#34;&gt;ビームサーチ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;幅1 で時間制限まで回す&lt;/li&gt;
&lt;li&gt;深さは max(20, 35 - turn)
&lt;ul&gt;
&lt;li&gt;浅い読みだと LEARN の価値が低く見積もられると想定して深くした&lt;/li&gt;
&lt;li&gt;35 ターンでゲームが終了するとざっくり想定&lt;/li&gt;
&lt;li&gt;20 は最低読む深さで調整の結果だが長過ぎる気もする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;12 ターン以降は LEARN を遷移から外す
&lt;ul&gt;
&lt;li&gt;リプレイを見る限り後半 LEARN を必要としない場面が多いため探索効率を優先&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;相手が常に一番下を LEARN すると想定して適宜 LEARN を遷移から外す
&lt;ul&gt;
&lt;li&gt;あとで取れば良いと判断して一旦取らないでおくような操作を弾く&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;評価関数&#34;&gt;評価関数&lt;/h3&gt;
&lt;p&gt;「BREW でスコアに変換される素材」と「ゲーム終了後まで残る素材」で価値が異なる為、&lt;br&gt;
現在累計で何回 BREW を行ったかでどちらに属する素材なのかざっくり判定することにした&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5 回目の BREW をまだ行っていなければ現在のインベントリを 「BREW でスコアに変換される素材」と判定
&lt;ul&gt;
&lt;li&gt;評価値は &lt;code&gt;score + (tier-0 + tier-1 * 2 + tier-2 * 3 + tier-3 * 4)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;実際には終了後まで残る素材もあるが判定できないので無視&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;5 回目の BREW を行っていれば「ゲーム終了後まで残る素材」と判定
&lt;ul&gt;
&lt;li&gt;評価値は &lt;code&gt;score + (tier-1 + tier-2 + tier-3)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;実際にはこの中から一部が 「BREW でスコアに変換される素材」になるが判定できないので無視&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記の評価関数だと LEARN を行うことの価値が低く見積もられてしまい、&lt;br&gt;
LEARN せずに CAST する操作が優先的に探索されてしまう。&lt;br&gt;
LEARN してから CAST する操作を優先的に探索する為に以下の補正を加えた&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;15 ターン目までは習得済み CAST の個数を補正値として評価値に加える&lt;/li&gt;
&lt;li&gt;15 ターン目以降は補正を外す
&lt;ul&gt;
&lt;li&gt;15 ターン辺りからは LEARN してから CAST する操作のほうが素で評価値が高くなるだろうと想定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;またゲーム終了となる操作列の場合は厳密なスコア計算を行い&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相手より自分のスコアが高い場合は評価値を &lt;code&gt;+INF - turn * N + score&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;自分より相手のスコアが高い場合は評価値を &lt;code&gt;-INF - turn * N + score&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;とした (N は取りうる score より十分に大きい値)&lt;br&gt;
できるだけ早くゲームを終わらせて、その上でスコアが高い状態を探すイメージ&lt;/p&gt;
&lt;h3 id=&#34;相手側の探索&#34;&gt;相手側の探索&lt;/h3&gt;
&lt;p&gt;相手の行動により自分の将来の行動が制限される場合がある&lt;br&gt;
これにより発生する不利をできるだけ無くすために、相手側から見た状態でビームサーチをして、&lt;br&gt;
その探索結果に基づき自分の探索を行うことにした&lt;br&gt;
探索で得られた N ターン先までの相手の状態をターン毎に持っておき、自分の探索を行う際に以下のような処理を行った&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相手が使用した BREW は遷移から外す&lt;/li&gt;
&lt;li&gt;相手が使用した BREW を自分が使用していた場合は妨害が成功したとみなして評価値を少し良くする&lt;/li&gt;
&lt;li&gt;相手がゲームを終了させた場合はこちらもゲーム終了とみなす&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;N ターン目の自分の状態を評価する場合は N ターン目の相手の状態を参照する&lt;br&gt;
ゲーム終了とみなした状態はそれ以上探索しない&lt;br&gt;
探索で得られた結果とは異なる操作を行われた場合のことを考えるとあまり良い手ではなかったかも&lt;/p&gt;
&lt;h3 id=&#34;重複盤面の排除&#34;&gt;重複盤面の排除&lt;/h3&gt;
&lt;p&gt;ビームサーチの探索の中で同一の状態を複数回探索してしまうのを防ぐために、以下のような形で重複盤面の排除を行った&lt;/p&gt;
&lt;p&gt;以下の値で同一な状態かを判定する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作集合
&lt;ul&gt;
&lt;li&gt;同一である場合、例外を除いて同一な状態になる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用済みの CAST
&lt;ul&gt;
&lt;li&gt;操作集合が同一でも REST のタイミングによって変化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;インベントリの tier-0
&lt;ul&gt;
&lt;li&gt;操作集合が同一でも LEARN のタイミングによって変化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スコア
&lt;ul&gt;
&lt;li&gt;操作集合が同一でも BREW のタイミングによって変化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;スコアが低いものは探索する必要がないと判断し、以下の key, value でメモ化した&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;key: &lt;code&gt;(操作集合, 使用済みの CAST, インベントリの tie-0)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;value: &lt;code&gt;スコア&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同一の key がメモに存在し、&lt;code&gt;メモのスコア &amp;gt;= スコア&lt;/code&gt; であればその状態はそれ以上探索しないようにした&lt;br&gt;
操作集合については各操作をハッシュ値に変換して足し合わせたものを用意することで計算が重くならないようにした&lt;br&gt;
(遷移のたびに操作に対応したハッシュ値を足して更新する)&lt;/p&gt;
&lt;p&gt;操作順序による無駄な探索を減らすために導入したが、
操作集合が異なるが同一の状態という場合に対応できないので改善の余地がありそう&lt;/p&gt;
&lt;h3 id=&#34;高速化&#34;&gt;高速化&lt;/h3&gt;
&lt;p&gt;使用済み CAST, 取得済み LEARN などの集合を BitSet で管理するようにした&lt;br&gt;
(事前に ID を圧縮しておくことで 32bit の整数値に十分収まる)&lt;br&gt;
また BREW のボーナス計算や LEARN の先読み税計算のためのカウンタも BREW、LEARN それぞれ一つの整数値に収まるようにした&lt;br&gt;
(愚直にやると BREW では 2つ LEARN では 6つのカウンタが必要になる)&lt;/p&gt;
&lt;h2 id=&#34;やったけどだめだったこと&#34;&gt;やったけどだめだったこと&lt;/h2&gt;
&lt;h3 id=&#34;並列化&#34;&gt;並列化&lt;/h3&gt;
&lt;p&gt;コンテスト中 twitter で Codingame は並列化可能っぽい？というのを見かけたので mpsc を使いビームサーチの並列化を試したが、  実際に動かした際に探索回数が並列化前よりむしろ悪化した為、Codingame の実行環境ではマルチスレッドが使用できないと判断し、あまり調査せずそこで切り上げてしまった&lt;br&gt;
(もしかしたらできるのかも)&lt;/p&gt;
&lt;h3 id=&#34;learn-の価値推定&#34;&gt;LEARN の価値推定&lt;/h3&gt;
&lt;p&gt;LEARN の取得がその後どの程度スコアに貢献するのか推定できれば min_max 法でいい感じにできる気がしたので&lt;br&gt;
LEARN の価値推定を試したがうまくいかず&lt;/p&gt;
&lt;p&gt;以下が CAST が貢献する 1 ゲーム当たりの平均スコアになるだろうと想定&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(CAST した回数) / (LEARN した回数) x (CAST により加算されるインベントリの価値)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ローカル環境で自己対戦を回して上記を記録し&lt;br&gt;
それを調整しつつ評価値として用いてみたが、あまり芳しくなかったので切り上げた&lt;/p&gt;
&lt;h2 id=&#34;本質とは関係ないこと&#34;&gt;本質とは関係ないこと&lt;/h2&gt;
&lt;h3 id=&#34;ローカルでの実行環境の構築&#34;&gt;ローカルでの実行環境の構築&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/CodinGame/FallChallenge2020&#34;&gt;テスターのリポジトリ&lt;/a&gt; が公開されているので、若干コードをいじりつつ手元でビルドしてローカル実行できるようにした&lt;br&gt;
これは主にベンチマーク用の入力ファイルを生成するときに役立った&lt;br&gt;
全然関係ないけど &lt;a href=&#34;https://github.com/CodinGame/FallChallenge2020/issues/2&#34;&gt;issue&lt;/a&gt; を立ててる人がいたのでコメント返したら解決したっぽくて良かった&lt;/p&gt;
&lt;h3 id=&#34;ci&#34;&gt;CI&lt;/h3&gt;
&lt;p&gt;元々マラソン用に Github + AWS CodeBuild の構成を用意しており手元のコードを push すると CI が動いて&lt;br&gt;
slack に通知が行く感じになっていた&lt;br&gt;
あまり活用できてる感じは無かったが、一応少し書いたテストが毎回実行されてるので良かった気はする&lt;/p&gt;
&lt;h3 id=&#34;rust&#34;&gt;Rust&lt;/h3&gt;
&lt;p&gt;Clion でデバッグ機能使っても C++ 無限にバグらせる自分が、&lt;br&gt;
Rust だとほぼバグなく実装に専念できたので、マジで良い言語だと思います&lt;br&gt;
最近はコンパイル通すのも苦でなくなった感がある&lt;/p&gt;
&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;
&lt;p&gt;学生時代ぶりに長期間の AI コンテストに参加しました&lt;br&gt;
あの頃と比べてアルゴリズム的な能力は全く成長してないですが、それ以外の部分が多少なりとも社会で鍛えられたのでそれなりに良い結果が出せた気がします&lt;br&gt;
あと今は無職なのでフルで参加でき、時間を使いきれたのも大きいです&lt;br&gt;
社会で生活をしながらこういう長期コンテストに参加して結果を出せる方は本当に尊敬の気持ちです&lt;/p&gt;
&lt;h2 id=&#34;おまけ-危なかった話&#34;&gt;[おまけ] 危なかった話&lt;/h2&gt;
&lt;p&gt;ビームサーチで状態同士の価値を比較する必要があり、以下のようなコードを書いていました&lt;br&gt;
これは &lt;code&gt;self.value&lt;/code&gt; と &lt;code&gt;other.value&lt;/code&gt; を比較し、比較に失敗した場合 (値が NaN だった等) に except 内をエラー出力としてプログラムが落ちる感じです&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Ord &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; StateWrapper&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    S: Clone,
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self, other: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Self&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Ordering&lt;/span&gt; {
        self.value.partial_cmp(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;other.value).expect(
            format&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed compare f64 (value0={}, value1={})&amp;#34;&lt;/span&gt;,
                other.value, self.value,
            )
            .as_str(),
        )
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;自分としては比較に失敗した場合のみエラー用の文字列が生成されてほしい気持ちだったんですが、&lt;br&gt;
上記だと常に文字列が生成されるコードになっています&lt;br&gt;
そのためビームサーチ内の状態比較のたびに上記のエラー文の生成が走りパフォーマンスが劇的に低下していました&lt;br&gt;
最終的に以下に修正して事なきを得ました&lt;br&gt;
以下のコードでは比較失敗時のみエラー文の生成が行われます&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Ord &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; StateWrapper&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    S: Clone,
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self, other: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Self&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Ordering&lt;/span&gt; {
        self.value.partial_cmp(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;other.value)
            .unwrap_or_else(&lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; {
                panic&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed compare f64 (value0={}, value1={})&amp;#34;&lt;/span&gt;,
                    self.value, other.value,
                )
            })
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/rust-lang/rust-clippy&#34;&gt;rust-clippy&lt;/a&gt; という rust の静的解析ツールがあり、 Legend に上がった後になんとなくかけてみたんですが、指摘事項を修正した後にベンチマークを取ると異様に速度が向上しており糞ビックリという話でした&lt;br&gt;
clippy ありがとう&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ISUCON 10 予選 参加記</title>
      <link>https://omuric.github.io/posts/isucon10-qualify/</link>
      <pubDate>Mon, 14 Sep 2020 16:33:29 +0900</pubDate>
      
      <guid>https://omuric.github.io/posts/isucon10-qualify/</guid>
      <description>&lt;h1 id=&#34;isucon-10-予選-参加記&#34;&gt;ISUCON 10 予選 参加記&lt;/h1&gt;
&lt;p&gt;2020年 9月12日 (土) に開催された ISUCON 10 の予選に一人チームで Rust で参加しました&lt;br&gt;
予選突破のボーダーが 2158 点で、自分の最終結果は 1017 点でした&lt;br&gt;
(&lt;a href=&#34;http://isucon.net/archives/55008744.html&#34;&gt;最終結果一覧&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&#34;事前準備&#34;&gt;事前準備&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ISUCON 9 の参照実装を Rust で書き直す (未完)
&lt;ul&gt;
&lt;li&gt;actix-web + sqlx で実装&lt;/li&gt;
&lt;li&gt;半分ぐらい実装して、ライブラリは理解した気持ちになったのと実装がしんどくなったので諦めた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tohutohu/isucon9/blob/master/Makefile&#34;&gt;ISUCON 9 の予選1日目一位の方の Makefile&lt;/a&gt; をパクる
&lt;ul&gt;
&lt;li&gt;Makefile 使うのが辛かったので &lt;a href=&#34;https://github.com/sagiegurari/cargo-make&#34;&gt;cargo-make&lt;/a&gt; で書き直した&lt;/li&gt;
&lt;li&gt;オリジナルはサーバ内で使う想定になっているが、全サーバを一度に操作したかったのでローカルから各サーバに ssh して操作する形に書き直した&lt;/li&gt;
&lt;li&gt;自分の運用に合わせて幾つかコマンドを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;設定ファイルの管理
&lt;ul&gt;
&lt;li&gt;各サーバの設定ファイル (hosts, my.cnf, nginx.conf, sysctl.cnf) をローカルで git 管理するように&lt;/li&gt;
&lt;li&gt;nginx.conf と my.cnf はデプロイ前にバリデーションをかけるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;sysctl, mysql, nginx のいい感じの設定を調べる&lt;/li&gt;
&lt;li&gt;nginx でのロードバランシング、mysql のレプリケーションを素振り&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;当日やったこと&#34;&gt;当日やったこと&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sysctl, mysql, nginx に設定ファイルにいい感じの設定を入れる&lt;/li&gt;
&lt;li&gt;スロークエリを確認しながら index を貼る&lt;/li&gt;
&lt;li&gt;nazotte の内包判定をアプリケーション側で行う
&lt;ul&gt;
&lt;li&gt;判定のために SQL クエリの発行が行われていたので修正&lt;/li&gt;
&lt;li&gt;競プロっぽいなと思いつつ &lt;a href=&#34;https://www.nttpc.co.jp/technology/number_algorithm.html&#34;&gt;NTTPC さんの記事&lt;/a&gt; を写経した&lt;/li&gt;
&lt;li&gt;絶対バグらせる気がしたが、オリジナルとAPI のレスポンスを比べて diff がなかったので恐らくバグってないはず (1ケースしか試してないけど&amp;hellip;) (ベンチも通ってるので多分大丈夫)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;物件のレコメンドのクエリを修正
&lt;ul&gt;
&lt;li&gt;ドアサイズを絞るために無駄な OR があったので消した
&lt;ul&gt;
&lt;li&gt;width, height の大きい方を door_size_0, 小さい方を door_size_1 としてカラムを追加&lt;/li&gt;
&lt;li&gt;椅子の w, h, z の一番小さいものを door_size_1 と比較, 二番目に小さいものを door_size_0 と比較する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;結局いい感じに index に乗らなかった (SQL の知識が足らずここで諦めてしまった)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bot を nginx で弾く
&lt;ul&gt;
&lt;li&gt;ドキュメント記載の Bot の正規表現は PHP preg_match() に準拠してそうだった (勘) ので、&lt;a href=&#34;http://okumocchi.jp/php/re.php&#34;&gt;php 正規表現チェッカー&lt;/a&gt; で確認しながらテストした&lt;/li&gt;
&lt;li&gt;nginx の if で使える正規表現の理解が足りず、弾くとまずいものまで弾きそうだったので、幾つかのパターンは無視した&lt;/li&gt;
&lt;li&gt;actix-web の Guard を一瞬使おうとしたが正規表現に対応して無かったので諦めた&lt;/li&gt;
&lt;li&gt;スコアに影響するパス ( /api/chair/buy/{id} , /api/estate/req_doc/{id}) は Bot でも通すようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;サーバ構成の変更
&lt;ul&gt;
&lt;li&gt;mysql の CPU 使用率が 90 % ぐらいで張り付いていたので、DB の分割を試したが上手く行かず
&lt;ul&gt;
&lt;li&gt;Write 1 台, Read 2台でレプリケーションを試したが、遅延のためかベンチマークが通らず&amp;hellip; (時間が足らずちゃんと確認できてないので別原因かも)&lt;/li&gt;
&lt;li&gt;アプリケーションの修正も含めてかなり無駄に時間を使ってしまった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;仕方ないので以下の構成で妥協した
&lt;ul&gt;
&lt;li&gt;1: nginx + app&lt;/li&gt;
&lt;li&gt;2: app&lt;/li&gt;
&lt;li&gt;3: mysql&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;テーブル毎に DB 分割思いつきたかった&amp;hellip; (悲しい)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;再起動試験
&lt;ul&gt;
&lt;li&gt;不要なサービスの自動起動を無効にして、全台再起動後にテスト&lt;/li&gt;
&lt;li&gt;コンテスト終了後の再テストで出たスコアが最終結果になると勘違いしており、ここで下振れたスコアのまま放置してしまった&lt;br&gt;
(もともと 1240 点ぐらいで -200 点ぐらい下振れてて悲しかったが、結局予選通ってないのでまあ)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;良かったこと&#34;&gt;良かったこと&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Rust で参加
&lt;ul&gt;
&lt;li&gt;これまで Python で参加していたが、あまり書かないので読むのも書くのも脳死でできず辛かった&lt;/li&gt;
&lt;li&gt;最近割と Rust を書く機会が多く、割と習熟できていたのでアプリケーション周りで詰まることは無く良かった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;事前に用意した Makefile
&lt;ul&gt;
&lt;li&gt;ほぼ必要な操作を網羅していて、それらが脳死でできるのでかなり楽だった&lt;/li&gt;
&lt;li&gt;kataribe と pt-query-digest スゴイ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一人参加
&lt;ul&gt;
&lt;li&gt;必然的にすべての部分を見ないと行けないので、自分に足りない部分が明確になってよかった&lt;/li&gt;
&lt;li&gt;コミュニケーションコストが無なのでそこはかなり楽だった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;反省点&#34;&gt;反省点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SQL 周りの知識不足
&lt;ul&gt;
&lt;li&gt;スロークエリを直す作業で、なかなか index に乗ってくれず辛かった&lt;/li&gt;
&lt;li&gt;作業時間的にもここがボトルネックになっていた&lt;/li&gt;
&lt;li&gt;データベーススペシャリスト試験受けるか&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;インフラ周りの設定の知識不足
&lt;ul&gt;
&lt;li&gt;パラメータが与える影響の理解が不足していて、問題に応じた調整が全然できなかった&lt;/li&gt;
&lt;li&gt;過去問で練習したい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rust のパフォーマンス測定
&lt;ul&gt;
&lt;li&gt;いい感じに測定する方法がわからず今回は諦めてしまった&lt;/li&gt;
&lt;li&gt;直前に &lt;a href=&#34;https://github.com/tikv/pprof-rs&#34;&gt;pprof-rs&lt;/a&gt; を試したが、使いこなせる自信が無かったので本番では使わなかった&lt;/li&gt;
&lt;li&gt;NewRelic APM, Rust にも対応してくれ〜〜&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;設定ファイルの管理
&lt;ul&gt;
&lt;li&gt;etckeeper というのがあるらしいので今度使ってみる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アプリケーションの並列処理
&lt;ul&gt;
&lt;li&gt;今回使わなかったが、もっとラフに入れていっても良かった気がする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;
&lt;p&gt;予選突破できず悔しかったですが、ドチャクソ楽しかったです&lt;br&gt;
誘う人いないので来年も一人枠を残してほしい&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>