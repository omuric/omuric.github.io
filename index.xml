<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>o</title>
    <link>https://omuric.github.io/</link>
    <description>Recent content on o</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 24 Nov 2020 00:40:00 +0900</lastBuildDate>
    
	<atom:link href="https://omuric.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Codingame Fall Challenge 2020 参加記</title>
      <link>https://omuric.github.io/posts/codingame-fall-challenge-2020/</link>
      <pubDate>Tue, 24 Nov 2020 00:40:00 +0900</pubDate>
      
      <guid>https://omuric.github.io/posts/codingame-fall-challenge-2020/</guid>
      <description>&lt;h1 id=&#34;codingame-fall-challenge-2020-参加記&#34;&gt;Codingame Fall Challenge 2020 参加記&lt;/h1&gt;
&lt;p&gt;2020年 11/12(木) ~ 11/23(月) に開催された &lt;a href=&#34;https://www.codingame.com/contests/fall-challenge-2020&#34;&gt;Codingame Fall Challenge 2020&lt;/a&gt; に参加しました&lt;br&gt;
最終結果は 41/7043 位でした&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/omuric/blog/master/resources/_gen/images/codingame-fall-challenge-2020_result.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;やったこと&#34;&gt;やったこと&lt;/h2&gt;
&lt;h3 id=&#34;ビームサーチ&#34;&gt;ビームサーチ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;幅1 で時間制限まで回す&lt;/li&gt;
&lt;li&gt;深さは max(20, 35 - turn)
&lt;ul&gt;
&lt;li&gt;浅い読みだと LEARN の価値が低く見積もられると想定して深くした&lt;/li&gt;
&lt;li&gt;35 ターンでゲームが終了するとざっくり想定&lt;/li&gt;
&lt;li&gt;20 は最低読む深さで調整の結果だが長過ぎる気もする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;15 ターン以降は LEARN を遷移から外す
&lt;ul&gt;
&lt;li&gt;リプレイを見る限り後半 LEARN を必要としない場面が多いため探索効率を優先&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;相手が常に一番下を LEARN すると想定して適宜 LEARN を遷移から外す
&lt;ul&gt;
&lt;li&gt;あとで取れば良いと判断して一旦取らないでおくような操作を弾く&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;評価関数&#34;&gt;評価関数&lt;/h3&gt;
&lt;p&gt;「BREW でスコアに変換される素材」と「ゲーム終了後まで残る素材」で価値が異なる為、&lt;br&gt;
現在累計で何回 BREW を行ったかでどちらに属する素材なのかざっくり判定することにした&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5 回目の BREW をまだ行っていなければ現在のインベントリを 「BREW でスコアに変換される素材」と判定
&lt;ul&gt;
&lt;li&gt;評価値は &lt;code&gt;score + (tier-0 + tier-1 * 2 + tier-2 * 3 + tier-3 * 4)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;実際には終了後まで残る素材もあるが判定できないので無視&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;5 回目の BREW を行っていれば「ゲーム終了後まで残る素材」と判定
&lt;ul&gt;
&lt;li&gt;評価値は &lt;code&gt;score + (tier-1 + tier-2 + tier-3)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;実際にはこの中から一部が 「BREW でスコアに変換される素材」になるが判定できないので無視&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記の評価関数だと LEARN を行うことの価値が低く見積もられてしまい、&lt;br&gt;
LEARN せずに CAST する操作が優先的に探索されてしまう。&lt;br&gt;
LEARN してから CAST する操作を優先的に探索する為に以下の補正を加えた&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;15 ターン目までは習得済み CAST の個数を補正値として評価値に加える&lt;/li&gt;
&lt;li&gt;15 ターン目以降は補正を外す
&lt;ul&gt;
&lt;li&gt;15 ターン辺りからは LEARN してから CAST する操作のほうが素で評価値が高くなるだろうと想定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;またゲーム終了となる操作列の場合は厳密なスコア計算を行い&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相手より自分のスコアが高い場合は評価値を &lt;code&gt;+INF - turn * N + score&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;自分より相手のスコアが高い場合は評価値を &lt;code&gt;-INF - turn * N + score&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;とした (N は十分に大きい値)&lt;br&gt;
できるだけ早くゲームを終わらせて、その上でスコアが高い状態を探すイメージ&lt;/p&gt;
&lt;h3 id=&#34;相手側の探索&#34;&gt;相手側の探索&lt;/h3&gt;
&lt;p&gt;相手の行動により自分の将来の行動が制限される場合がある&lt;br&gt;
これにより発生する不利をできるだけ無くすために、相手側から見た状態でビームサーチをして、&lt;br&gt;
その探索結果に基づき自分の探索を行うことにした&lt;br&gt;
探索で得られた N ターン先までの相手の状態をターン毎に持っておき、自分の探索を行う際に以下のような処理を行った&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相手が使用した BREW は遷移から外す&lt;/li&gt;
&lt;li&gt;相手が使用した BREW を自分が使用していた場合は妨害が成功したとみなして評価値を少し良くする&lt;/li&gt;
&lt;li&gt;相手がゲームを終了させた場合はこちらもゲーム終了とみなす&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;N ターン目の自分の状態を評価する場合は N ターン目の相手の状態を参照する&lt;br&gt;
ゲーム終了とみなした状態はそれ以上探索しない&lt;br&gt;
探索で得られた結果とは異なる操作を行われた場合のことを考えるとあまり良い手ではなかったかも&lt;/p&gt;
&lt;h3 id=&#34;重複盤面の排除&#34;&gt;重複盤面の排除&lt;/h3&gt;
&lt;p&gt;ビームサーチの探索の中で同一の状態を複数回探索してしまうのを防ぐために、以下のような形で重複盤面の排除を行った&lt;/p&gt;
&lt;p&gt;以下の値があれば同一な状態かを判定できる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作集合
&lt;ul&gt;
&lt;li&gt;同一である場合、例外を除いて同一な状態になる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用済みの CAST
&lt;ul&gt;
&lt;li&gt;操作集合が同一でも REST のタイミングによって変化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;インベントリの tier-0
&lt;ul&gt;
&lt;li&gt;操作集合が同一でも LEARN のタイミングによって変化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スコア
&lt;ul&gt;
&lt;li&gt;操作集合が同一でも BREW のタイミングによって変化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;スコアが低いものは探索する必要がないと判断し、以下の key, value でメモ化した&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;key: &lt;code&gt;(操作集合, 使用済みの CAST, インベントリの tie-0)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;value: &lt;code&gt;スコア&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同一の key がメモに存在し、メモのほうがスコアが高ければその状態はそれ以上探索しないようにした&lt;br&gt;
&lt;code&gt;操作集合&lt;/code&gt; については各操作をハッシュ値に変換して足し合わせたものを用意することで解決した&lt;br&gt;
(遷移のたびに操作に対応したハッシュ値を足して更新する)&lt;/p&gt;
&lt;h3 id=&#34;高速化&#34;&gt;高速化&lt;/h3&gt;
&lt;p&gt;使用済み CAST, 取得済み LEARN などの集合を BitSet で管理するようにした&lt;br&gt;
(事前に ID を圧縮しておくことで 32bit の整数値に十分収まる)&lt;br&gt;
また BREW のボーナス計算用や LEARN の先読み税の計算のためのカウンターも 32bit の整数値に収まるように実装した&lt;/p&gt;
&lt;h2 id=&#34;やったけどだめだったこと&#34;&gt;やったけどだめだったこと&lt;/h2&gt;
&lt;h3 id=&#34;並列化&#34;&gt;並列化&lt;/h3&gt;
&lt;p&gt;コンテスト中 twitter で Codingame は並列化可能っぽい？というのを見かけたので mpsc を使いビームサーチの並列化を試したが、  実際に動かした際に探索回数が並列化前よりむしろ悪化した為、Codingame の実行環境ではマルチスレッドが使用できないと判断し、あまり調査せずそこで切り上げてしまった&lt;br&gt;
(もしかしたらできるのかも)&lt;/p&gt;
&lt;h3 id=&#34;learn-の価値推定&#34;&gt;LEARN の価値推定&lt;/h3&gt;
&lt;p&gt;LEARN の取得がその後どの程度スコアに貢献するのか推定できれば min_max 法でいい感じにできる気がしたので&lt;br&gt;
LEARN の価値推定を試したがうまくいかず&lt;/p&gt;
&lt;p&gt;以下が CAST が貢献する 1 ゲーム当たりの平均スコアになるだろうと想定&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(CAST した回数) / (LEARN した回数) x (CAST により加算されるインベントリの価値)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ローカル環境で自己対戦を回して上記を記録し&lt;br&gt;
それを調整しつつ評価値として用いてみたが、あまり芳しくなかったので切り上げた&lt;/p&gt;
&lt;h2 id=&#34;本質とは関係ないこと&#34;&gt;本質とは関係ないこと&lt;/h2&gt;
&lt;h3 id=&#34;ローカルでの実行環境の構築&#34;&gt;ローカルでの実行環境の構築&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/CodinGame/FallChallenge2020&#34;&gt;テスターのリポジトリ&lt;/a&gt; が公開されているので、若干コードをいじりつつ手元でビルドしてローカル実行できるようにした&lt;br&gt;
これは主にベンチマーク用の入力ファイルを生成するときに役立った&lt;br&gt;
全然関係ないけど &lt;a href=&#34;https://github.com/CodinGame/FallChallenge2020/issues/2&#34;&gt;issue&lt;/a&gt; を立ててる人がいたのでコメント返したら解決したっぽくて良かった&lt;/p&gt;
&lt;h3 id=&#34;ci&#34;&gt;CI&lt;/h3&gt;
&lt;p&gt;元々マラソン用に Github + AWS CodeBuild の構成を用意しており手元のコードを push すると CI が動いて&lt;br&gt;
slack に通知が行く感じになっていた&lt;br&gt;
あまり活用できてる感じは無かったが、一応少し書いたテストが毎回実行されてるので良かった気はする&lt;/p&gt;
&lt;h3 id=&#34;rust&#34;&gt;Rust&lt;/h3&gt;
&lt;p&gt;Clion でデバッグ機能使っても C++ 無限にバグらせる自分が、&lt;br&gt;
Rust だとほぼバグなく実装に専念できたので、マジで良い言語だと思います&lt;br&gt;
最近はコンパイル通すのも苦でなくなった感がある&lt;/p&gt;
&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;
&lt;p&gt;学生時代ぶりに長期間の AI コンテストに参加しました&lt;br&gt;
あの頃と比べてアルゴリズム的な能力は全く成長してないですが、それ以外の部分が多少なりとも社会で鍛えられたのでそれなりに良い結果が出せた気がします&lt;br&gt;
あと今は無職なのでフルで参加でき、時間を使いきれたのも大きいです&lt;br&gt;
社会で生活をしながらこういう長期コンテストに参加して結果を出せる方は本当に尊敬の気持ちです&lt;/p&gt;
&lt;h2 id=&#34;おまけ-危なかった話&#34;&gt;[おまけ] 危なかった話&lt;/h2&gt;
&lt;p&gt;ビームサーチで状態同士の価値を比較する必要があり、以下のようなコードを書いていました&lt;br&gt;
これは &lt;code&gt;self.value&lt;/code&gt; と &lt;code&gt;other.value&lt;/code&gt; を比較し、比較に失敗した場合 (値が NaN だった等) に except 内をエラー出力としてプログラムが落ちる感じです&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Ord &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; StateWrapper&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    S: Clone,
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self, other: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Self&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Ordering&lt;/span&gt; {
        self.value.partial_cmp(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;other.value).expect(
            format&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed compare f64 (value0={}, value1={})&amp;#34;&lt;/span&gt;,
                other.value, self.value,
            )
            .as_str(),
        )
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;自分としては比較に失敗した場合のみエラー用の文字列が生成されてほしい気持ちだったんですが、&lt;br&gt;
上記だと常に文字列が生成されるコードになっています&lt;br&gt;
そのためビームサーチ内の状態比較のたびに上記のエラー文の生成が走りパフォーマンスが劇的に低下していました&lt;br&gt;
最終的に以下に修正して事なきを得ました&lt;br&gt;
以下のコードでは比較失敗時のみエラー文の生成が行われます&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Ord &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; StateWrapper&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    S: Clone,
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self, other: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Self&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Ordering&lt;/span&gt; {
        self.value.partial_cmp(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;other.value)
            .unwrap_or_else(&lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; {
                panic&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed compare f64 (value0={}, value1={})&amp;#34;&lt;/span&gt;,
                    self.value, other.value,
                )
            })
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/rust-lang/rust-clippy&#34;&gt;rust-clippy&lt;/a&gt; という rust の静的解析ツールがあり、 Legend に上がった後になんとなくかけてみたんですが、指摘事項を修正した後にベンチマークを取ると異様に速度が向上しており糞ビックリという話でした&lt;br&gt;
clippy ありがとう&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ISUCON 10 予選 参加記</title>
      <link>https://omuric.github.io/posts/isucon10-qualify/</link>
      <pubDate>Mon, 14 Sep 2020 16:33:29 +0900</pubDate>
      
      <guid>https://omuric.github.io/posts/isucon10-qualify/</guid>
      <description>&lt;h1 id=&#34;isucon-10-予選-参加記&#34;&gt;ISUCON 10 予選 参加記&lt;/h1&gt;
&lt;p&gt;2020年 9月12日 (土) に開催された ISUCON 10 の予選に一人チームで Rust で参加しました&lt;br&gt;
予選突破のボーダーが 2158 点で、自分の最終結果は 1017 点でした&lt;br&gt;
(&lt;a href=&#34;http://isucon.net/archives/55008744.html&#34;&gt;最終結果一覧&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&#34;事前準備&#34;&gt;事前準備&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ISUCON 9 の参照実装を Rust で書き直す (未完)
&lt;ul&gt;
&lt;li&gt;actix-web + sqlx で実装&lt;/li&gt;
&lt;li&gt;半分ぐらい実装して、ライブラリは理解した気持ちになったのと実装がしんどくなったので諦めた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tohutohu/isucon9/blob/master/Makefile&#34;&gt;ISUCON 9 の予選1日目一位の方の Makefile&lt;/a&gt; をパクる
&lt;ul&gt;
&lt;li&gt;Makefile 使うのが辛かったので &lt;a href=&#34;https://github.com/sagiegurari/cargo-make&#34;&gt;cargo-make&lt;/a&gt; で書き直した&lt;/li&gt;
&lt;li&gt;オリジナルはサーバ内で使う想定になっているが、全サーバを一度に操作したかったのでローカルから各サーバに ssh して操作する形に書き直した&lt;/li&gt;
&lt;li&gt;自分の運用に合わせて幾つかコマンドを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;設定ファイルの管理
&lt;ul&gt;
&lt;li&gt;各サーバの設定ファイル (hosts, my.cnf, nginx.conf, sysctl.cnf) をローカルで git 管理するように&lt;/li&gt;
&lt;li&gt;nginx.conf と my.cnf はデプロイ前にバリデーションをかけるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;sysctl, mysql, nginx のいい感じの設定を調べる&lt;/li&gt;
&lt;li&gt;nginx でのロードバランシング、mysql のレプリケーションを素振り&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;当日やったこと&#34;&gt;当日やったこと&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sysctl, mysql, nginx に設定ファイルにいい感じの設定を入れる&lt;/li&gt;
&lt;li&gt;スロークエリを確認しながら index を貼る&lt;/li&gt;
&lt;li&gt;nazotte の内包判定をアプリケーション側で行う
&lt;ul&gt;
&lt;li&gt;判定のために SQL クエリの発行が行われていたので修正&lt;/li&gt;
&lt;li&gt;競プロっぽいなと思いつつ &lt;a href=&#34;https://www.nttpc.co.jp/technology/number_algorithm.html&#34;&gt;NTTPC さんの記事&lt;/a&gt; を写経した&lt;/li&gt;
&lt;li&gt;絶対バグらせる気がしたが、オリジナルとAPI のレスポンスを比べて diff がなかったので恐らくバグってないはず (1ケースしか試してないけど&amp;hellip;) (ベンチも通ってるので多分大丈夫)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;物件のレコメンドのクエリを修正
&lt;ul&gt;
&lt;li&gt;ドアサイズを絞るために無駄な OR があったので消した
&lt;ul&gt;
&lt;li&gt;width, height の大きい方を door_size_0, 小さい方を door_size_1 としてカラムを追加&lt;/li&gt;
&lt;li&gt;椅子の w, h, z の一番小さいものを door_size_1 と比較, 二番目に小さいものを door_size_0 と比較する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;結局いい感じに index に乗らなかった (SQL の知識が足らずここで諦めてしまった)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bot を nginx で弾く
&lt;ul&gt;
&lt;li&gt;ドキュメント記載の Bot の正規表現は PHP preg_match() に準拠してそうだった (勘) ので、&lt;a href=&#34;http://okumocchi.jp/php/re.php&#34;&gt;php 正規表現チェッカー&lt;/a&gt; で確認しながらテストした&lt;/li&gt;
&lt;li&gt;nginx の if で使える正規表現の理解が足りず、弾くとまずいものまで弾きそうだったので、幾つかのパターンは無視した&lt;/li&gt;
&lt;li&gt;actix-web の Guard を一瞬使おうとしたが正規表現に対応して無かったので諦めた&lt;/li&gt;
&lt;li&gt;スコアに影響するパス ( /api/chair/buy/{id} , /api/estate/req_doc/{id}) は Bot でも通すようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;サーバ構成の変更
&lt;ul&gt;
&lt;li&gt;mysql の CPU 使用率が 90 % ぐらいで張り付いていたので、DB の分割を試したが上手く行かず
&lt;ul&gt;
&lt;li&gt;Write 1 台, Read 2台でレプリケーションを試したが、遅延のためかベンチマークが通らず&amp;hellip; (時間が足らずちゃんと確認できてないので別原因かも)&lt;/li&gt;
&lt;li&gt;アプリケーションの修正も含めてかなり無駄に時間を使ってしまった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;仕方ないので以下の構成で妥協した
&lt;ul&gt;
&lt;li&gt;1: nginx + app&lt;/li&gt;
&lt;li&gt;2: app&lt;/li&gt;
&lt;li&gt;3: mysql&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;テーブル毎に DB 分割思いつきたかった&amp;hellip; (悲しい)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;再起動試験
&lt;ul&gt;
&lt;li&gt;不要なサービスの自動起動を無効にして、全台再起動後にテスト&lt;/li&gt;
&lt;li&gt;コンテスト終了後の再テストで出たスコアが最終結果になると勘違いしており、ここで下振れたスコアのまま放置してしまった&lt;br&gt;
(もともと 1240 点ぐらいで -200 点ぐらい下振れてて悲しかったが、結局予選通ってないのでまあ)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;良かったこと&#34;&gt;良かったこと&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Rust で参加
&lt;ul&gt;
&lt;li&gt;これまで Python で参加していたが、あまり書かないので読むのも書くのも脳死でできず辛かった&lt;/li&gt;
&lt;li&gt;最近割と Rust を書く機会が多く、割と習熟できていたのでアプリケーション周りで詰まることは無く良かった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;事前に用意した Makefile
&lt;ul&gt;
&lt;li&gt;ほぼ必要な操作を網羅していて、それらが脳死でできるのでかなり楽だった&lt;/li&gt;
&lt;li&gt;kataribe と pt-query-digest スゴイ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一人参加
&lt;ul&gt;
&lt;li&gt;必然的にすべての部分を見ないと行けないので、自分に足りない部分が明確になってよかった&lt;/li&gt;
&lt;li&gt;コミュニケーションコストが無なのでそこはかなり楽だった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;反省点&#34;&gt;反省点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SQL 周りの知識不足
&lt;ul&gt;
&lt;li&gt;スロークエリを直す作業で、なかなか index に乗ってくれず辛かった&lt;/li&gt;
&lt;li&gt;作業時間的にもここがボトルネックになっていた&lt;/li&gt;
&lt;li&gt;データベーススペシャリスト試験受けるか&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;インフラ周りの設定の知識不足
&lt;ul&gt;
&lt;li&gt;パラメータが与える影響の理解が不足していて、問題に応じた調整が全然できなかった&lt;/li&gt;
&lt;li&gt;過去問で練習したい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rust のパフォーマンス測定
&lt;ul&gt;
&lt;li&gt;いい感じに測定する方法がわからず今回は諦めてしまった&lt;/li&gt;
&lt;li&gt;直前に &lt;a href=&#34;https://github.com/tikv/pprof-rs&#34;&gt;pprof-rs&lt;/a&gt; を試したが、使いこなせる自信が無かったので本番では使わなかった&lt;/li&gt;
&lt;li&gt;NewRelic APM, Rust にも対応してくれ〜〜&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;設定ファイルの管理
&lt;ul&gt;
&lt;li&gt;etckeeper というのがあるらしいので今度使ってみる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アプリケーションの並列処理
&lt;ul&gt;
&lt;li&gt;今回使わなかったが、もっとラフに入れていっても良かった気がする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;
&lt;p&gt;予選突破できず悔しかったですが、ドチャクソ楽しかったです&lt;br&gt;
誘う人いないので来年も一人枠を残してほしい&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>